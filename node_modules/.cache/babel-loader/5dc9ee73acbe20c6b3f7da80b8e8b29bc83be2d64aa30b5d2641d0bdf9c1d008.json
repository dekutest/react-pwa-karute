{"ast":null,"code":"import { supabase } from '../utils/supabaseClient';\n\n// 治癒ステータスを更新（完治/治療中）\nexport const updateInjuryStatus = async (injuryId, isHealed) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('injuries').update({\n      is_healed: isHealed\n    }).eq('id', injuryId).select();\n    if (error) {\n      console.error('Error updating injury status:', error.message);\n      return null;\n    }\n    console.log('Update response:', data);\n    return data;\n  } catch (error) {\n    console.error('Unexpected error during update:', error.message);\n    return null;\n  }\n};","map":{"version":3,"names":["supabase","updateInjuryStatus","injuryId","isHealed","data","error","from","update","is_healed","eq","select","console","message","log"],"sources":["/Users/y/Documents/GitHub/react-pwa-karute/src/api/updateInjuryStatus.js"],"sourcesContent":["import { supabase } from '../utils/supabaseClient';\n\n// 治癒ステータスを更新（完治/治療中）\nexport const updateInjuryStatus = async (injuryId, isHealed) => {\n  try {\n    const { data, error } = await supabase\n      .from('injuries')\n      .update({ is_healed: isHealed })\n      .eq('id', injuryId)\n      .select();\n\n    if (error) {\n      console.error('Error updating injury status:', error.message);\n      return null;\n    }\n\n    console.log('Update response:', data);\n    return data;\n  } catch (error) {\n    console.error('Unexpected error during update:', error.message);\n    return null;\n  }\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,yBAAyB;;AAElD;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAC9D,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC;MAAEC,SAAS,EAAEL;IAAS,CAAC,CAAC,CAC/BM,EAAE,CAAC,IAAI,EAAEP,QAAQ,CAAC,CAClBQ,MAAM,CAAC,CAAC;IAEX,IAAIL,KAAK,EAAE;MACTM,OAAO,CAACN,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACO,OAAO,CAAC;MAC7D,OAAO,IAAI;IACb;IAEAD,OAAO,CAACE,GAAG,CAAC,kBAAkB,EAAET,IAAI,CAAC;IACrC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdM,OAAO,CAACN,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACO,OAAO,CAAC;IAC/D,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}