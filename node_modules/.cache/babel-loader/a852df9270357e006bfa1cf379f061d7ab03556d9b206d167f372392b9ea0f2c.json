{"ast":null,"code":"import { supabase } from '../utils/supabaseClient';\n\n// 患者を追加\nexport const addPatient = async (name, team) => {\n  try {\n    const {\n      data,\n      error\n    } = await supabase.from('patients').insert([{\n      name,\n      team\n    }]).select(); // データを取得\n\n    if (error) throw error;\n    if (data && data.length > 0) {\n      console.log(\"Supabase挿入結果:\", data); // デバッグ用\n      return data[0]; // 生成された患者データを返す\n    } else {\n      throw new Error('Patient ID not generated');\n    }\n  } catch (error) {\n    console.error('Error adding patient:', error.message);\n    return null;\n  }\n};\n\n// 患者情報を更新\nexport const updatePatient = async (patientId, name, team) => {\n  try {\n    if (!patientId || patientId === 'undefined') {\n      throw new Error('Invalid patient ID');\n    }\n    const {\n      data,\n      error\n    } = await supabase.from('patients').update({\n      name,\n      team\n    }).eq('id', patientId);\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating patient:', error.message);\n    return null;\n  }\n};","map":{"version":3,"names":["supabase","addPatient","name","team","data","error","from","insert","select","length","console","log","Error","message","updatePatient","patientId","update","eq"],"sources":["/Users/y/Documents/GitHub/react-pwa-karute/src/api/patientOperations.js"],"sourcesContent":["import { supabase } from '../utils/supabaseClient';\n\n// 患者を追加\nexport const addPatient = async (name, team) => {\n  try {\n    const { data, error } = await supabase\n      .from('patients')\n      .insert([{ name, team }])\n      .select(); // データを取得\n\n    if (error) throw error;\n    if (data && data.length > 0) {\n      console.log(\"Supabase挿入結果:\", data);  // デバッグ用\n      return data[0]; // 生成された患者データを返す\n    } else {\n      throw new Error('Patient ID not generated');\n    }\n  } catch (error) {\n    console.error('Error adding patient:', error.message);\n    return null;\n  }\n};\n\n// 患者情報を更新\nexport const updatePatient = async (patientId, name, team) => {\n  try {\n    if (!patientId || patientId === 'undefined') {\n      throw new Error('Invalid patient ID');\n    }\n\n    const { data, error } = await supabase\n      .from('patients')\n      .update({ name, team })\n      .eq('id', patientId);\n\n    if (error) throw error;\n    return data;\n  } catch (error) {\n    console.error('Error updating patient:', error.message);\n    return null;\n  }\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,yBAAyB;;AAElD;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,KAAK;EAC9C,IAAI;IACF,MAAM;MAAEC,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,CAAC;MAAEL,IAAI;MAAEC;IAAK,CAAC,CAAC,CAAC,CACxBK,MAAM,CAAC,CAAC,CAAC,CAAC;;IAEb,IAAIH,KAAK,EAAE,MAAMA,KAAK;IACtB,IAAID,IAAI,IAAIA,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MAC3BC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEP,IAAI,CAAC,CAAC,CAAE;MACrC,OAAOA,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,MAAM;MACL,MAAM,IAAIQ,KAAK,CAAC,0BAA0B,CAAC;IAC7C;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAACQ,OAAO,CAAC;IACrD,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,SAAS,EAAEb,IAAI,EAAEC,IAAI,KAAK;EAC5D,IAAI;IACF,IAAI,CAACY,SAAS,IAAIA,SAAS,KAAK,WAAW,EAAE;MAC3C,MAAM,IAAIH,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEA,MAAM;MAAER,IAAI;MAAEC;IAAM,CAAC,GAAG,MAAML,QAAQ,CACnCM,IAAI,CAAC,UAAU,CAAC,CAChBU,MAAM,CAAC;MAAEd,IAAI;MAAEC;IAAK,CAAC,CAAC,CACtBc,EAAE,CAAC,IAAI,EAAEF,SAAS,CAAC;IAEtB,IAAIV,KAAK,EAAE,MAAMA,KAAK;IACtB,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACQ,OAAO,CAAC;IACvD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}