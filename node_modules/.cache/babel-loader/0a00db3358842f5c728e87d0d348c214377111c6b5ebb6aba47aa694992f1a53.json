{"ast":null,"code":"// 施術データの取得\nconst fetchTreatments = async () => {\n  const {\n    data,\n    error\n  } = await supabase.from('treatments') // ← ここを修正\n  .select('*').eq('patient_id', id).order('date', {\n    ascending: false\n  });\n  if (error) {\n    console.error('施術データ取得エラー:', error.message);\n  } else {\n    setTreatments(data);\n  }\n};\n\n// 施術データの登録\nconst handleSubmit = async e => {\n  var _session$user, _session$user$user_me;\n  e.preventDefault();\n  if (newTreatment.trim() === '') return;\n  const {\n    data: session\n  } = await supabase.auth.getSession();\n  const practitionerName = (session === null || session === void 0 ? void 0 : (_session$user = session.user) === null || _session$user === void 0 ? void 0 : (_session$user$user_me = _session$user.user_metadata) === null || _session$user$user_me === void 0 ? void 0 : _session$user$user_me.full_name) || '匿名';\n  const {\n    error\n  } = await supabase.from('treatments') // ← ここを修正\n  .insert([{\n    patient_id: id,\n    content: newTreatment,\n    body_part: bodyPart,\n    date: date || new Date().toISOString(),\n    location: location,\n    memo: memo,\n    patient_name: patient.name,\n    practitioner: practitionerName,\n    treatment: treatmentName\n  }]);\n  if (error) {\n    console.error('施術登録エラー:', error.message);\n  } else {\n    setTreatments([{\n      content: newTreatment,\n      body_part: bodyPart,\n      date: date || new Date().toISOString(),\n      location: location,\n      memo: memo,\n      patient_name: patient.name,\n      practitioner: practitionerName,\n      treatment: treatmentName\n    }, ...treatments]);\n    setNewTreatment('');\n    setBodyPart('');\n    setLocation('');\n    setMemo('');\n    setTreatmentName('');\n    setDate('');\n  }\n};","map":{"version":3,"names":["fetchTreatments","data","error","supabase","from","select","eq","id","order","ascending","console","message","setTreatments","handleSubmit","e","_session$user","_session$user$user_me","preventDefault","newTreatment","trim","session","auth","getSession","practitionerName","user","user_metadata","full_name","insert","patient_id","content","body_part","bodyPart","date","Date","toISOString","location","memo","patient_name","patient","name","practitioner","treatment","treatmentName","treatments","setNewTreatment","setBodyPart","setLocation","setMemo","setTreatmentName","setDate"],"sources":["/Users/y/Documents/GitHub/react-pwa-karute/src/components/PatientDetail.js"],"sourcesContent":["// 施術データの取得\nconst fetchTreatments = async () => {\n  const { data, error } = await supabase\n    .from('treatments')  // ← ここを修正\n    .select('*')\n    .eq('patient_id', id)\n    .order('date', { ascending: false });\n\n  if (error) {\n    console.error('施術データ取得エラー:', error.message);\n  } else {\n    setTreatments(data);\n  }\n};\n\n// 施術データの登録\nconst handleSubmit = async (e) => {\n  e.preventDefault();\n  if (newTreatment.trim() === '') return;\n\n  const { data: session } = await supabase.auth.getSession();\n  const practitionerName = session?.user?.user_metadata?.full_name || '匿名';\n\n  const { error } = await supabase\n    .from('treatments')  // ← ここを修正\n    .insert([{\n      patient_id: id,\n      content: newTreatment,\n      body_part: bodyPart,\n      date: date || new Date().toISOString(),\n      location: location,\n      memo: memo,\n      patient_name: patient.name,\n      practitioner: practitionerName,\n      treatment: treatmentName\n    }]);\n\n  if (error) {\n    console.error('施術登録エラー:', error.message);\n  } else {\n    setTreatments([{\n      content: newTreatment,\n      body_part: bodyPart,\n      date: date || new Date().toISOString(),\n      location: location,\n      memo: memo,\n      patient_name: patient.name,\n      practitioner: practitionerName,\n      treatment: treatmentName\n    }, ...treatments]);\n\n    setNewTreatment('');\n    setBodyPart('');\n    setLocation('');\n    setMemo('');\n    setTreatmentName('');\n    setDate('');\n  }\n};\n"],"mappings":"AAAA;AACA,MAAMA,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,MAAM;IAAEC,IAAI;IAAEC;EAAM,CAAC,GAAG,MAAMC,QAAQ,CACnCC,IAAI,CAAC,YAAY,CAAC,CAAE;EAAA,CACpBC,MAAM,CAAC,GAAG,CAAC,CACXC,EAAE,CAAC,YAAY,EAAEC,EAAE,CAAC,CACpBC,KAAK,CAAC,MAAM,EAAE;IAAEC,SAAS,EAAE;EAAM,CAAC,CAAC;EAEtC,IAAIP,KAAK,EAAE;IACTQ,OAAO,CAACR,KAAK,CAAC,aAAa,EAAEA,KAAK,CAACS,OAAO,CAAC;EAC7C,CAAC,MAAM;IACLC,aAAa,CAACX,IAAI,CAAC;EACrB;AACF,CAAC;;AAED;AACA,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;EAAA,IAAAC,aAAA,EAAAC,qBAAA;EAChCF,CAAC,CAACG,cAAc,CAAC,CAAC;EAClB,IAAIC,YAAY,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;EAEhC,MAAM;IAAElB,IAAI,EAAEmB;EAAQ,CAAC,GAAG,MAAMjB,QAAQ,CAACkB,IAAI,CAACC,UAAU,CAAC,CAAC;EAC1D,MAAMC,gBAAgB,GAAG,CAAAH,OAAO,aAAPA,OAAO,wBAAAL,aAAA,GAAPK,OAAO,CAAEI,IAAI,cAAAT,aAAA,wBAAAC,qBAAA,GAAbD,aAAA,CAAeU,aAAa,cAAAT,qBAAA,uBAA5BA,qBAAA,CAA8BU,SAAS,KAAI,IAAI;EAExE,MAAM;IAAExB;EAAM,CAAC,GAAG,MAAMC,QAAQ,CAC7BC,IAAI,CAAC,YAAY,CAAC,CAAE;EAAA,CACpBuB,MAAM,CAAC,CAAC;IACPC,UAAU,EAAErB,EAAE;IACdsB,OAAO,EAAEX,YAAY;IACrBY,SAAS,EAAEC,QAAQ;IACnBC,IAAI,EAAEA,IAAI,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACtCC,QAAQ,EAAEA,QAAQ;IAClBC,IAAI,EAAEA,IAAI;IACVC,YAAY,EAAEC,OAAO,CAACC,IAAI;IAC1BC,YAAY,EAAEjB,gBAAgB;IAC9BkB,SAAS,EAAEC;EACb,CAAC,CAAC,CAAC;EAEL,IAAIxC,KAAK,EAAE;IACTQ,OAAO,CAACR,KAAK,CAAC,UAAU,EAAEA,KAAK,CAACS,OAAO,CAAC;EAC1C,CAAC,MAAM;IACLC,aAAa,CAAC,CAAC;MACbiB,OAAO,EAAEX,YAAY;MACrBY,SAAS,EAAEC,QAAQ;MACnBC,IAAI,EAAEA,IAAI,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACtCC,QAAQ,EAAEA,QAAQ;MAClBC,IAAI,EAAEA,IAAI;MACVC,YAAY,EAAEC,OAAO,CAACC,IAAI;MAC1BC,YAAY,EAAEjB,gBAAgB;MAC9BkB,SAAS,EAAEC;IACb,CAAC,EAAE,GAAGC,UAAU,CAAC,CAAC;IAElBC,eAAe,CAAC,EAAE,CAAC;IACnBC,WAAW,CAAC,EAAE,CAAC;IACfC,WAAW,CAAC,EAAE,CAAC;IACfC,OAAO,CAAC,EAAE,CAAC;IACXC,gBAAgB,CAAC,EAAE,CAAC;IACpBC,OAAO,CAAC,EAAE,CAAC;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}